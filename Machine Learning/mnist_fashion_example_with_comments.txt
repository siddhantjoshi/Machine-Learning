# import the framework and display it's version
import tensorflow as tf
print(tf.__version__)

#store he dataset into the variable named as the mnist dataset
mnist_data=tf.keras.datasets.fashion_mnist

#load the data into the two two dimenssional vector arraywwith the one column is of training data and the other for it'slables 
#next is the test data and it's lables 
(training_images, training_lables), (test_images, test_lables) = mnist_data.load_data()


#normalizaion method
training_images=training_images/255.0
test_images=test_images/255.0

# construct a model
model=tf.keras.models.Sequential([tf.keras.layers.Flatten(),
                                # flatten help to flate the model,
                                # as per the rule , which say's that the network shape should be same as the shape of your data
                                # method flatten() does the same thing it flatten the 28*28 pixel shape into 784*1 which same as sated by the rule
                                  tf.keras.layers.Dense(512, activation=tf.nn.relu),
                                #relu rectifier linaear unit function
                                #return the value 0 if it is less then 0 and pass to variable activation
                                 tf.keras.layers.Dense(10, activation=tf.nn.softmax)
                                  #find the number with the highest value and pass it to the variable activation 
                                 ])
model.compile(optimizer ='adam',loss = 'sparse_categorical_crossentropy')
model.fit(training_images, training_lables, epochs=5)
model.evaluate(test_images,test_labels)

classifications =model.predict(test_images)

print(classifications[0])
print(test_labels[0])