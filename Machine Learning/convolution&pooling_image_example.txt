# mnist fashion dataset  solve using convolution layer

#import cv2
import numpy as np
from scipy import misc
i=misc.ascent()

import matplotlib.pyplot as plt
plt.grid(False)
plt.gray()
plt.axis('off')
plt.imshow(i)
plt.show()

i_transformed = np.copy(i)
# get the dimension's of image 
size_x = i_transformed.shape[0]
size_y = i_transformed.shape[1]

#set the filter by which we going to filter the image as per our desired
filter=[[-1, -2, -1],[0, 0, 0],[1, 2, 1]]
weight = 1

for x in range(1, size_x-1):
    for y in range(1, size_y-1):
        output_pixel = 0.0
        
        output_pixel = output_pixel + (i[x-1,y-1] * filter[0][0])
        output_pixel = output_pixel + (i[x+0,y-1] * filter[0][1])
        output_pixel = output_pixel + (i[x+1,y-1] * filter[0][2])
        
        output_pixel = output_pixel + (i[x-1,y+0] * filter[1][0])
        output_pixel = output_pixel + (i[x+0,y+0] * filter[1][1])
        output_pixel = output_pixel + (i[x+1,y+0] * filter[1][2])
        
        output_pixel = output_pixel + (i[x-1,y+1] * filter[2][0])
        output_pixel = output_pixel + (i[x+0,y+1] * filter[2][1])
        output_pixel = output_pixel + (i[x+1,y+1] * filter[2][2])
        
        output_pixel = output_pixel *weight
        
        if(output_pixel < 0):
            output_pixel = 0
        if(output_pixel > 255):
            output_pixel = 255

        i_transformed[x, y] = output_pixel
        
# plot the image
plt.gray()
plt.grid(False)
plt.imshow(i_transformed)
plt.show()

# pooling the image (compressing image )

new_x = int(size_x/2)
new_y = int(size_y/2)
newImage = np.zeros((new_x, new_y))

# iterate the from 0 to size_x with differnce of 2  
for x in range(0, size_x, 2):
    for y in range(0, size_y, 2):
        pixels = []
        
        pixels.append(i_transformed[x+0, y+0])
        pixels.append(i_transformed[x+1, y+0])
        
        pixels.append(i_transformed[x+0, y+1])
        pixels.append(i_transformed[x+1, y+1])
        
        pixels.sort(reverse =True)
        newImage[int(x/2), int(y/2)] = pixels[0]
    
# plot the compressed image

plt.gray()
plt.grid(False)
plt.imshow(newImage)
plt.show()
